#pragma checksum "F:\YourFlow project\SourceNet\SourceNet\Areas\Website\Views\Technology\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0d70947f9ca868d49092870a7beb7d303bcd81ea"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Website_Views_Technology_Index), @"mvc.1.0.view", @"/Areas/Website/Views/Technology/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\YourFlow project\SourceNet\SourceNet\Areas\Website\Views\_ViewImports.cshtml"
using SourceNet;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\YourFlow project\SourceNet\SourceNet\Areas\Website\Views\_ViewImports.cshtml"
using MyApp.Entity.Entities;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0d70947f9ca868d49092870a7beb7d303bcd81ea", @"/Areas/Website/Views/Technology/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9fa62c2c75ae027b87c7c093fc4ae3924b361205", @"/Areas/Website/Views/_ViewImports.cshtml")]
    public class Areas_Website_Views_Technology_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("img-fluid transform-img"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/page-image.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("img-fluid"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/blockchain-img.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/key-point/immutable.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/key-point/incorruptible.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/key-point/self-patching.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/key-point/self-scaling.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/key-point/no-point.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/unique-hash-img.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("100%"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/qr-code-img.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/technology/api-img.svg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<section class=""section-banner technology-bg"">
    <div class=""textOverImage container"">
        <div class=""row align-items-center"">
            <div class=""col-sm-5"">
                <div class=""section-title text-start"">
                    <h4>
                        VeriDoc Global has developed a verification protocol which combines anti-fraud software with
                        Distributed Ledger Technology (DLT).
                    </h4>
                    <h2 class=""mt-2"">TECHNOLOGY</h2>
                </div>
            </div>
            <div class=""col-sm-7 text-center"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "0d70947f9ca868d49092870a7beb7d303bcd81ea8694", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
        </div>
    </div>
</section>


<section class=""sectionWrapper technology-desc"">
    <div class=""container"">
        <div class=""row"">
            <div class=""col-md-6"">
                <figure>
                    <h3><b class=""text_red"">Most systems today</b> are built on centralised networks.</h3>
                    <h4>This means that data is stored using a client-server configuration.</h4>
                </figure>
            </div>
        </div>
        <br><br><br>
        <div class=""row"">
            <div class=""col-md-5"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "0d70947f9ca868d49092870a7beb7d303bcd81ea10403", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
            <div class=""col-md-7"">
                <figure>
                    <h3>
                        <b class=""text_red"">Blockchain technology uses a decentralised network configuration.</b>
                        Data is replicated and stored on every machine that acts as a node in the peer-to-peer
                        network.
                    </h3>
                    <h4>
                        The larger this network, the harder it is to hack the system. You would need to hack
                        multiple computers at once to be able to alter or change the data, compared to a single
                        server which can be targeted.
                    </h4>
                </figure>
            </div>
        </div>
    </div>
</section>



<section class=""sectionWrapper smartlogin-sec technology-key bg_lightyellow"">
    <div class=""container"">
        <h5>Other characteristics tied to blockchain technology include:</h5>
        <div class=""row"">
            <d");
            WriteLiteral("iv class=\"col-12 col-lg-6 col-xl\">\n                <figure>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "0d70947f9ca868d49092870a7beb7d303bcd81ea12663", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    <p class=\"text-white\">Immutable</p>\n                </figure>\n            </div>\n            <div class=\"col-12 col-lg-6 col-xl\">\n                <figure>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "0d70947f9ca868d49092870a7beb7d303bcd81ea13980", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    <p class=\"text-white\">Incorruptible</p>\n                </figure>\n            </div>\n            <div class=\"col-12 col-lg-6 col-xl\">\n                <figure>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "0d70947f9ca868d49092870a7beb7d303bcd81ea15301", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    <p class=\"text-white\">Self-patching</p>\n                </figure>\n            </div>\n            <div class=\"col-12 col-lg-6 col-xl\">\n                <figure>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "0d70947f9ca868d49092870a7beb7d303bcd81ea16622", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    <p class=\"text-white\">Self-scaling</p>\n                </figure>\n            </div>\n            <div class=\"col-12 col-lg-6 col-xl\">\n                <figure>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "0d70947f9ca868d49092870a7beb7d303bcd81ea17942", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <p class=""text-white"">No single point of failure</p>
                </figure>
            </div>
        </div>
    </div>
</section>


<section class=""sectionWrapper hash-sec bg_green"">
    <div class=""container"">
        <div class=""row align-items-center"">
            <div class=""col-md-6"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "0d70947f9ca868d49092870a7beb7d303bcd81ea19397", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
            <div class=""col-md-6"">
                <div class=""section-title"">
                    <h2 class=""text-white"">Unique Hash Value</h2>
                </div>
                <p class=""text-white"">
                    The VeriDoc Protocol uses a unique hash value to verify whether a document is
                    true and correct. Hash values can be compared to the DNA or fingerprint of a file, whereby no
                    two hash values are the same. The original document is processed through a cryptographic
                    algorithm and a hash value is produced which identifies the original document. If the document
                    is modified in any way, the value of the hash will also change significantly.
                </p>
                <p class=""text-white"">
                    <i>
                        Using a cryptographic algorithm means that customers are not required to
                        store the original document on the blockchain and their in");
            WriteLiteral(@"formation remains private.
                    </i>
                </p>
            </div>
        </div>
    </div>
</section>


<section class=""sectionWrapper"">
    <div class=""container"">
        <div class=""section-title"">
            <h2>QR Codes</h2>
        </div>
        <div class=""row"">
            <div class=""col-md-6"">
                <p>
                    QR codes are a type of matrix barcode or two-dimensional barcode. A standard QR code can hold up
                    to 3Kb of data, compared to a standard barcode which holds less than 100 characters.
                </p>
                <p>
                    The VeriDoc Global Protocol allows users to verify whether a document is true and correct by
                    simply scanning a QR code on the document.
                </p>
            </div>
            <div class=""col-md-6"">
                <p>
                    Once the QR code is scanned, VeriDoc compares the unique hash value found in the QR code to the
                    ");
            WriteLiteral(@"unique hash value of the original document stored on the client’s server and the blockchain.
                </p>
                <p class=""text_red"">
                    <b>
                        <i>
                            Since the unique hash value stored in the blockchain is incorruptible and
                            can never be modified, it lends itself as a highly trusted reference point for the
                            verification process.
                        </i>
                    </b>
                </p>
            </div>
        </div>
        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "0d70947f9ca868d49092870a7beb7d303bcd81ea23227", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    </div>
</section>


<section class=""sectionWrapper multichain-sec bg_green"">
    <div class=""container"">
        <div class=""section-title"">
            <h2 class=""text-white"">A Multi-chain Solution</h2>
        </div>
        <div class=""row"">
            <div class=""col-md-6"">
                <p class=""text-white"">
                    VeriDoc Global leverages several different blockchains to give customers more
                    control over their data.
                </p>
                <p class=""text-white"">
                    The primary blockchain used by VeriDoc Global Protocol is the Ethereum
                    network.
                </p>
            </div>
            <div class=""col-md-6"">
                <p class=""text-white"">
                    Ethereum is currently the second largest public blockchain in the world and is
                    backed by the Ethereum Enterprise Alliance (EEA) which consists of over 500 members including
                    Microsoft, IBM, Deloitte, Toyo");
            WriteLiteral("ta and HP.\n                </p>\n            </div>\n        </div>\n        <div class=\"embed-responsive\">\n            <iframe src=\"https://www.youtube.com/embed/ikcaVmDimXk?rel=0\"");
            BeginWriteAttribute("allowfullscreen", " allowfullscreen=\"", 7971, "\"", 7989, 0);
            EndWriteAttribute();
            WriteLiteral(@"></iframe>
        </div>
        <p class=""text-white"">
            VeriDoc Global has since expanded into Ethereum Classic, Bitcoin and is now also
            looking at integrating into several private and hybrid blockchain networks. Customers can choose which
            blockchains they wish to store their unique hash values on and will soon have the option to leverage
            multiple blockchains at once.
        </p>
        <br>
        <div class=""text-center"">
            <img class=""img-fluid"" width=""80%"" src=""assets/img/technology/map-img.svg"" />
        </div>
    </div>
</section>


<section class=""sectionWrapper"">
    <div class=""container"">
        <div class=""section-title"">
            <h2>Storage of Documents</h2>
        </div>
        <div class=""row"">
            <div class=""col-md-6"">
                <p>
                    All documents are stored on the client’s server. VeriDoc Global uses APIs to generate the unique
                    hash value and to check whether the documen");
            WriteLiteral(@"t on the client’s server has been changed. If the
                    original document on the client’s server is modified in any way, the verification process will
                    fail.
                </p>
                <p>
                    VeriDoc Global has also integrated with cloud-based systems such as Google Drive, giving
                    customers more options for storing their personal information.
                </p>
            </div>
            <div class=""col-md-6"">
                <p class=""text_red"">
                    <b>
                        <i>
                            The VeriDoc Protocol only requires the unique hash value to verify whether
                            a document is true and correct. Unless requested by the customer, the original document
                            is never placed on the blockchain.
                        </i>
                    </b>
                </p>
            </div>
        </div>
        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "0d70947f9ca868d49092870a7beb7d303bcd81ea27915", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    </div>
</section>



<section class=""sectionWrapper multichain-sec bg_green"">
    <div class=""container"">
        <div class=""section-title"">
            <h2 class=""text-white"">Blockchain Transactions</h2>
        </div>
        <p class=""text-white"">
            Transacting with a blockchain typically requires payment in the form of
            cryptocurrency. The Ethereum blockchain uses Ether which is converted to Gas to pay for transactions.
        </p>
        <div class=""embed-responsive"">
            <iframe src=""https://www.youtube.com/embed/m3loMJNsQFc?rel=0""");
            BeginWriteAttribute("allowfullscreen", " allowfullscreen=\"", 10648, "\"", 10666, 0);
            EndWriteAttribute();
            WriteLiteral(@"></iframe>
        </div>
        <p class=""text-white"">
            Since VeriDoc Global is a multi-chain solution, it would be impractical for customers
            to pay to use this solution using several different coins and tokens. Therefore, VeriDoc Global has
            introduced VDG, an ERC-20 token with utility characteristics to pay the required toll across several
            different blockchains at once.
        </p>
    </div>
</section>


<section class=""sectionWrapper"">
    <div class=""container"">
        <div class=""section-title"">
            <h2>Beyond Unique Hash Values,<br> QR Codes and Blockchain</h2>
        </div>
        <div class=""row"">
            <div class=""col-md-6"">
                <p>
                    VeriDoc Global is currently working on adding Artificial Intelligence (AI) to the verification
                    solution. This will allow users to view a report of all the changes made to a document.
                    Generating a report on all changes made to a 150-pag");
            WriteLiteral(@"e document will save companies time and
                    money on paralegal services.
                </p>
                <p>
                    VeriDoc Global is currently working on adding Artificial Intelligence (AI) to the verification
                    solution. This will allow users to view a report of all the changes made to a document.
                    Generating a report on all changes made to a 150-page document will save companies time and
                    money on paralegal services.
                </p>
            </div>
            <div class=""col-md-6"">
                <p>
                    in two different locations at the same time, the system will know that one of those products is a
                    counterfeit and that the QR code has been compromised. Using technology to stop that QR code
                    from being verified again will potentially stop thousands of counterfeits from entering the
                    market.
                </p>
            </div>
    ");
            WriteLiteral("    </div>\n    </div>\n</section>\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
